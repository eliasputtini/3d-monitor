import { useRef, useState, Suspense } from 'react'
import { Canvas } from '@react-three/fiber'
import { OrbitControls } from '@react-three/drei'

// Simple loading component for Suspense fallback
function Loading() {
  return (
    <mesh>
      <sphereGeometry args={[0.5, 16, 16]} />
      <meshStandardMaterial color="gray" wireframe />
    </mesh>
  )
}

function Box(props) {
  const ref = useRef()
  const [hovered, hover] = useState(false)
  const [clicked, click] = useState(false)
  
  return (
    <mesh
      {...props}
      ref={ref}
      scale={clicked ? 1.5 : 1}
      onClick={() => click(!clicked)}
      onPointerOver={(event) => (event.stopPropagation(), hover(true))}
      onPointerOut={() => hover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

// Component to hold all our boxes
function BoxGrid() {
  // Generate positions for 10 boxes in a grid pattern
  const boxes = [];
  const gridSize = 3; // 3x3 grid + 1 extra = 10 boxes
  const spacing = 2.5;
  
  // Create a grid of boxes
  let boxCount = 0;
  for (let x = 0; x < gridSize + 1; x++) {
    for (let z = 0; z < gridSize; z++) {
      if (boxCount < 10) {
        const posX = (x - gridSize / 2) * spacing;
        const posZ = (z - gridSize / 2) * spacing;
        boxes.push(<Box key={`box-${x}-${z}`} position={[posX, 0, posZ]} />);
        boxCount++;
      }
    }
  }
  
  return <>{boxes}</>;
}

export default function App() {
  return (
    <Canvas 
      orthographic 
      camera={{ 
        zoom: 40, 
        position: [10, 10, 10],
        near: 0.1,
        far: 1000
      }}
    >
      <color attach="background" args={['#f0f2ff']} />
      <ambientLight intensity={0.5} />
      <pointLight position={[10, 10, 10]} />
      <directionalLight intensity={0.8} position={[5, 5, 5]} />
      
      <Suspense fallback={<Loading />}>
        <BoxGrid />
      </Suspense>
      
      <OrbitControls 
        enableZoom={true}
        enablePan={true}
        enableRotate={true}
        makeDefault
        target={[0, 0, 0]}
        // Start with an isometric view
        minPolarAngle={Math.PI / 4}
        maxPolarAngle={Math.PI / 4}
      />
    </Canvas>
  )
}